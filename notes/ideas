wip:
    try event based system? no (won't be as fast or work in browser)
    Add github unit tests for lexer & parser

Stats:
    init    Took 5443ms (0.005443ms per line)
    jslim   Took    5ms (0.000005ms per line)

    Pyry: The actual compiler does 140mil lines/s on some programs
    Pyry: The bytecode VM hits about 20 mil lines/s
    Pyry: The lua interpreter is at about 2 mil lines/s

ideas to come:
    names:
        ~Yazur~ Kevin - this interpreter
        YolIDE- The IDE
        Yolex - "yolol expanded"
    Syntax highlighting
    Errors
    
    Edit with longer var names, spaces & maybe even multi line
        -> constantly squashed & parsed to check everything will fit in 70 chars
    Folder like network
        - create new devices (all devices available)
            - field tooltips
            - some rendered
            - js logic?
                - upgrade to more advanced stuff
                    - full rotation & inerta sim for fcu
                    - add a plane that they can collide with, auto landing challenges
                    (this is probably excessive)
                - optional
        - select device to edit (plan to create generic interface)
            - chip
                -- code editor
            - other
                -- simple render?
    Language upgrades (yolex (mainly))
        - Code squashing
        - Line spreading
        - @ tags
        - Code challenges
        - more adv. optimisations
            - like d=3*(a+b+c) vs d=2*a+2*b+2*c
        (see example)
        -- Everything optional, can edit in raw yolol if desired

    Debugging tools
        - unit testing
            - set test params (or even loops), get results printed like *my debug graphs*
        - opperation stepping
        - line stepping
        - graphing

    able to view map of vars (clicking?, see in "excel")
    Exports
        - yodine_debug_xxxxx.json
            -lexer out & parser out
        - raw yolol for chips
        - save files
            - state (all fields & vars)
            - code  (all yolex, yolol & network info)
            - full
        (nb: could also save client's data in local storage)
    Imports
        - save files
        - other formats
            -eg other dev tools for easy switch
    
    Operation settings:
        - set "excel" upgrade frequency
        - 

    N2K:
        - how does pasu want to interface with all this
        - typescript?? vwhy
        